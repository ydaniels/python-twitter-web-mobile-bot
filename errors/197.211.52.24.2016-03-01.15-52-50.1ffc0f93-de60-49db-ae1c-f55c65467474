(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/usr/local/lib/python2.7/dist-packages/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/usr/local/lib/python2.7/dist-packages/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/usr/local/lib/python2.7/dist-packages/pydal/adapters/mysql.py", line 132, in __init__\n    if do_connect: self.reconnect()\n  File "/usr/local/lib/python2.7/dist-packages/pydal/connection.py", line 104, in reconnect\n    self.connection = f()\n  File "/usr/local/lib/python2.7/dist-packages/pydal/adapters/mysql.py", line 130, in connector\n    return self.driver.connect(**driver_args)\n  File "/usr/local/lib/python2.7/dist-packages/MySQLdb/__init__.py", line 81, in Connect\n    return Connection(*args, **kwargs)\n  File "/usr/local/lib/python2.7/dist-packages/MySQLdb/connections.py", line 187, in __init__\n    super(Connection, self).__init__(*args, **kwargs2)\nOperationalError: (1045, "Access denied for user \'root\'@\'localhost\' (using password: YES)")\n'
p3
sS'layer'
p4
S'/root/web2py/applications/twitter/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engi\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL('mysql://root:twitterbotks@localhost/migration',migrate=True,fake_migrate=False)\nelse:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\n    db = DAL('google:datastore+ndb')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.take('forms.formstyle')  # or 'bootstrap3_stacked' or 'bootstrap2' or other\nresponse.form_label_separator = myconf.take('forms.separator')\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n## (optional) static assets folder versioning\n# response.static_version = '0.0.0'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db)\nauth.define_tables(username=True)\nservice = Service()\nplugins = PluginManager()\n\n## create all tables needed by auth if not custom tables\n\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = 'logging' if request.is_local else myconf.take('smtp.server')\nmail.settings.sender = myconf.take('smtp.sender')\nmail.settings.login = myconf.take('smtp.login')\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\nauth.settings.actions_disabled.append('register')\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\n\n\ndb.define_table('accounts',Field('username',type='string', length=250,required=True,unique=True,label='Username'), Field('password',type='password', length=250,required=True,label='Password',readable=False),\n                Field('firstname',type='string',default='0', length=250,label='Firstname'),Field('lastname',type='string',default='0', length=250,label='Lastname'),Field('email',type='string',required=True,default='0', length=250,label='Email'),\n                Field('email_password',type='string', default='0',length=250,label='Password For Email'),Field('oauth_token',default='0',type='string', length=1000,label='Token Key'),Field('oauth_seceret',type='string',default='0',\n                length=1000,label='Token Secret'),Field('proxy',type='string', length=100,default='0',label='Proxy'),Field('startunfollow',type='integer',default=0,comment='Please dont change this settings unless you need to',label='startunfollow'),Field('unfollowtrack',type='integer',default=0,readable=False,writable=False,label='startunfollow'),Field('followerscount',type='string',default=0,readable=False,writable=False,label='startunfollow'),Field('followingcount',type='string',default=0,readable=False,writable=False,label='startunfollow'),Field('likecount',type='string',default=0,readable=False,writable=False,label='startunfollow'),Field('suspended',type='string',default=0,readable=False,writable=False,label='startunfollow'),Field('phone',type='string',default=0,readable=False,writable=False,label='startunfollow'),Field('statuses_count',type='string',default=0,readable=False,writable=False,label='startunfollow'),Field('quitunfollow',type='integer',default=1000,label='Maximum Amount of People To Unfollow before Stating Follow campaign'), Field('inteluser',type='list:string',label='Add list of Intelligent Users'),Field('stopat',type='integer',default=0,label='How many of their users do you want to follow per run',comment='Cannot guarantee i would obey this depending on the amount of retweeters he or she has gotten on the latest hundred  post'), Field('ingnore',type='list:string',label='Add list of Users To Ignore when running Auto Unfollow'),Field('created_by',  default=auth.user_id,readable=False,writable=False,),format='%(username)s')\n\n\n#db.accounts.user_id.requires = IS_IN_DB(db, db.auth_user.id)\ndb.define_table('globalsettings', Field('settingsfor',requires=IS_IN_DB(db, 'accounts.id','%(username)s'),label='Account Number Id',comment='Accounts ID  This Settings would apply too '), Field('followsize',type='integer',label='How Many People Do You Want To Follow' ),Field('unfollowsize',type='integer',label='How Many People Do You Want To UnFollow' ), Field('retweetsize',type='integer',label='How Many Tweet Do You Want To Retweet' ), Field('likesize',type='integer',label='How Many Tweet Do You Want To Like' ), Field('dmtext',type='list:string',label='List Of DMs',comment=' supported tokens are {{@}}-> username,{{n}} ->name,{{l}}->location,{{d}}->description,{{w}}-> website e.g (hello {{@}} check out my site ) {{@}} would be replaced by the username we want to mention'),Field('keywordtext',type='list:string',label='List Of Keyword To Watch For Favourite'),Field('retweettext',type='list:string',label='List Of Keyword To Watch For Retweet'),Field('timertofollow',type='list:integer',label='Time To Wait For Between Each Follows'),Field('timertounfollow',type='list:integer',label='Time To Wait For Between Each UNFollows'),Field('timertolike',type='list:integer',label='Time To Wait For Between Each Like'),Field('timertoretweet',type='list:integer',label='Time To Wait For Between Each Retweet'),Field('timertodm',type='list:integer',label='Time To Wait For Between Each Dm'),Field('autotext',type='list:string',label='List Of Keyword To Watch For Auto tweet back'), Field('autosize',type='integer',label='How Many People You want to auto tweet to' ),Field('tweetback',type='list:string',label='List of tweet to use when auto mentioning',comment=' supported tokens are {{@}}-> username,{{n}} ->name,{{l}}->location,{{d}}->description,{{w}}-> website e.g (hello {{@}} check out my site ) {{@}} would be replaced by the username we want to mention'),Field('startfollow',type='integer',label='How many days To Wait Before The Bots Start to Unfollow When It detects it need to unfollow ',comment='Please multiply how many times you run the bot per day with the number e.g 3 days but you run the bot 2 twice a day, then input 6'))\ndb.define_table('intelligent_users', Field('name',type='string',label='Username'),Field('stopat',type='integer',default=0,label='How many of their users do you want to follow per run',comment='Cannot guarantee i would obey this depending on the amount of retweeters he or she has gotten on the latest hundred  post'))\ndb.define_table('users_to_follow', Field('name',type='string',length=128,label='Username',unique=True))\ndb.define_table('users_to_scrape', Field('name',type='string',label='Username Of People You Want To Scrape Their Followers',length=128,unique=True),Field('scraped',type='integer',default=0,label='Scraped ',comment='Please Dont Change this Unless There is to much error in the scrappers log or delete this user it means the account has been scrapped'))\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/root/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/root/web2py/applications/twitter/models/db.py", line 21, in <module>\n    db = DAL(\'mysql://root:twitterbotks@localhost/migration\',migrate=True,fake_migrate=False)\n  File "/usr/local/lib/python2.7/dist-packages/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/usr/local/lib/python2.7/dist-packages/pydal/base.py", line 473, in __init__\n    "Failure to connect, tried %d times:\\n%s" % (attempts, tb)\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/usr/local/lib/python2.7/dist-packages/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/usr/local/lib/python2.7/dist-packages/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/usr/local/lib/python2.7/dist-packages/pydal/adapters/mysql.py", line 132, in __init__\n    if do_connect: self.reconnect()\n  File "/usr/local/lib/python2.7/dist-packages/pydal/connection.py", line 104, in reconnect\n    self.connection = f()\n  File "/usr/local/lib/python2.7/dist-packages/pydal/adapters/mysql.py", line 130, in connector\n    return self.driver.connect(**driver_args)\n  File "/usr/local/lib/python2.7/dist-packages/MySQLdb/__init__.py", line 81, in Connect\n    return Connection(*args, **kwargs)\n  File "/usr/local/lib/python2.7/dist-packages/MySQLdb/connections.py", line 187, in __init__\n    super(Connection, self).__init__(*args, **kwargs2)\nOperationalError: (1045, "Access denied for user \'root\'@\'localhost\' (using password: YES)")\n\n'
p11
s.